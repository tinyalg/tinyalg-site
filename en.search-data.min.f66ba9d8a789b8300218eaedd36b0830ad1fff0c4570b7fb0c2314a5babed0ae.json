[{"id":0,"href":"/docs/getting-started/","title":"Getting Started","section":"Docs","content":"\rGetting Started with Waveu\r#\rWelcome to Waveu! This guide will help you set up and run Waveu on your ESP32, allowing you to generate and visualize waveforms easily. Whether you\u0026rsquo;re a beginner or an experienced developer, you\u0026rsquo;ll find step-by-step instructions to get started quickly. By the end of this guide, you’ll be able to generate a sawtooth wave and visualize it on your oscilloscope, as shown in the figure below!\nFigure: Sawtooth wave with a frequency of 200 Hz displayed on both channels: CH0 (top) and CH1 (bottom), generated as a result of completing this Getting Started guide.\n1. Short Description\r#\rCompile \u0026amp; Run on ESP32\r#\rWaveu\u0026rsquo;s example code on GitHub can be compiled and run on your ESP32. Simply connect the DAC pin to an oscilloscope, and you\u0026rsquo;re ready to generate diverse waveforms!\n2. Step by Step Guide\r#\rWaveu simplifies waveform generation with ESP32 by offering pre-configured examples. This guide will walk you through everything from setting up your hardware and software to visualizing waveforms on an oscilloscope. Even if you\u0026rsquo;re new to ESP32 or ESP-IDF, don\u0026rsquo;t worry—we\u0026rsquo;ve got you covered!\n2.1 Hardware Requirements\r#\rTo use Waveu, you\u0026rsquo;ll need:\nESP32 development board (for running software) PC and USB cable (for programming) Oscilloscope (to visualize waveform output) 2.2 Prerequisites on Software\r#\rBefore diving into Waveu, ensure you have:\nGit installed\nInstall git, following the Downloads link at the git homepage.\nESP-IDF setup\nInstall the ESP-IDF version 5.4 or later.\nFamiliarity with DAC examples We recommend reviewing the ESP-IDF example: DAC Continuous Signal Generator.\n\u0026ndash; New to ESP-IDF? \u0026ndash;\r#\rIf you\u0026rsquo;re new to ESP-IDF, here are some key concepts to help you get started:\nWhat is ESP-IDF? ESP-IDF (Espressif IoT Development Framework) is an official development framework for ESP32, offering tools, libraries, and examples to program the chip. Think of it as the foundation for writing, building, and deploying your applications.\nWhy Use ESP-IDF? While Arduino IDE is simpler, ESP-IDF offers advanced features, better debugging tools, and fine-grained control of hardware components, making it ideal for more complex projects like Waveu.\nUsing VSCode with ESP-IDF For beginners, using the ESP-IDF extension in VSCode can simplify navigation, code editing, and flashing your ESP32. The extension integrates the ESP-IDF tools directly into VSCode.\nInstalling ESP-IDF Follow Espressif\u0026rsquo;s guide to set up ESP-IDF. Installation includes setting up the toolchain, build tools, and ESP-IDF itself. Don\u0026rsquo;t worry—it’s well-documented, and you\u0026rsquo;ll only need to do it once.\nWhat is menuconfig? menuconfig is a configuration tool for setting up project-specific options, such as selecting hardware peripherals and tuning parameters. When you run idf.py menuconfig, you\u0026rsquo;ll see a terminal-based menu interface where you can configure Waveu options.\nCommon Commands\nidf.py build: Compiles your project. idf.py flash: Uploads the compiled firmware to your ESP32. idf.py monitor: Opens a serial monitor to view logs from the ESP32. 2.3 Build, Flash \u0026amp; Visualize on Oscilloscope\r#\rClone the repository:\ngit clone https://github.com/tinyalg/waveu.git Change to this directory:\ncd waveu/examples/sawtooth Alternatively, open this directory in VSCode with the ESP-IDF extension for easier navigation and editing.\nRun menuconfig:\nIn VSCode, open the ESP-IDF Terminal.\nidf.py menuconfig In menuconfig, configure the following settings under [Component config \u0026gt; Waveu Configuration]:\nSelect active DAC channels: CH0 and CH1: Output to both channels. CH0 only: Output to DAC Channel 0. CH1 only: Output to DAC Channel 1. Flash the example:\nidf.py build flash Monitor the output:\nidf.py monitor You should observe messages in the console confirming the start of waveform generation.\nI (291) UserWaveConfig: Frequency=200.00 I (291) Waveu-ESP32Config: waveformDataOutputTask to on core 0 at priority 10. I (291) Waveu: LEN_DATA_BUFFER=16000, SAMPLE_RATE=1000000, TIMER_PERIOD=16000 I (301) Waveu: Started waveformDataGenerationTask on core 1 at priority 5. Connect your oscilloscope: Attach the oscilloscope to the DAC output channel as configured in menuconfig.\n\u0026ndash; Troubleshooting \u0026ndash;\r#\rEven with proper setup, you might encounter some issues. Here are common problems and their solutions:\nESP32 not detected by your computer\nSolution: Ensure the USB cable supports data transfer (some cables are power-only). Try reconnecting or using a different USB port. Verify drivers are installed for your ESP32 board. idf.py command not recognized\nCause: ESP-IDF environment variables might not be set up. Solution: Re-run the ESP-IDF setup script for your OS: On Windows: Run install.bat and then export.bat. On Linux/macOS: Source the export.sh script in your terminal. Compilation errors\nCause: Missing or incompatible ESP-IDF version. Solution: Ensure you\u0026rsquo;re using ESP-IDF 5.4 or later and update if necessary. Flashing issues\nCause: Incorrect port or permissions. Solution: Use idf.py flash -p \u0026lt;your_port\u0026gt; to specify the correct port. On Linux/macOS, ensure your user has permission to access the port (e.g., add your user to the dialout group). No waveform visible on oscilloscope\nCause: Incorrect DAC channel configuration or wiring. Solution: Double-check your menuconfig settings for active DAC channels and ensure the correct pins are connected to your oscilloscope. Garbage output on serial monitor\nCause: Incorrect baud rate. Solution: Confirm that the monitor\u0026rsquo;s baud rate matches the project\u0026rsquo;s settings in menuconfig (default is 115200). "},{"id":1,"href":"/docs/ideas/lissajous/","title":"Lissajous Curve","section":"Ideas","content":"\rLissajous Curve\r#\rA Lissajous figure is a visual representation of the relationship between two periodic signals plotted against each other in an X-Y coordinate system, with its shape determined by the signals\u0026rsquo; frequency ratio, phase difference, and amplitudes. Figure: 300 Hz and 200 Hz sine waves (top) and their corresponding Lissajous curve (bottom), illustrating the relationship between frequency ratios and phase differences.\n1. The Basics\r#\rA Lissajous figure is created when two periodic signals are plotted against each other in an X-Y coordinate system: $$\rx(t) = A \\sin(a t)\r$$ $$\ry(t) = B \\sin(b t + \\delta)\r$$ Where: $ A, B $: Amplitudes of the signals. $ a, b $: Angular frequencies of the signals ($ a = 2\\pi f_x$ , $ b = 2\\pi f_y $). $ \\delta $: Phase difference between the signals. 2. Visualizing Phase Differences\r#\rThe shape of the Lissajous figure depends heavily on the phase difference ($ \\delta $):\n$\\delta = 0$: A diagonal line (positive slope) appears when both signals are in phase. $\\delta = \\pi/2$: A perfect circle forms if $ f_x = f_y $ and amplitudes are equal. $\\delta = \\pi$: A diagonal line with a negative slope forms when the signals are 180° out of phase. Intermediate $\\delta$: An ellipse forms, with the tilt and eccentricity determined by the phase difference. Example for Intermediate $\\delta$\r#\r# See code in notebook 3. Visualizing Frequency Ratios\r#\rThe frequency ratio ($ f_x : f_y $) determines the complexity of the Lissajous figure:\n1:1 Ratio ($ f_x = f_y $): The figure is simple and reflects only the phase difference. Examples: Line, circle, or ellipse. 2:1 Ratio ($ f_x = 2 f_y $): The figure has two lobes along the X-axis and resembles a \u0026ldquo;figure-eight.\u0026rdquo; 3:2 Ratio ($ 2 f_x = 3 f_y $): The figure has three lobes along the X-axis and two lobes along the Y-axis. For more complex ratios, the pattern becomes more intricate, often requiring careful analysis to interpret.\nExample for 3:2 Ratio ($ 2 f_x = 3 f_y $)\r#\r# See code in notebook 4. Combined Impact of Phase and Frequency\r#\rShape of the Figure: The phase difference determines the orientation and symmetry (e.g., diagonal line, tilted ellipse, or circle). Complexity of the Figure: The frequency ratio determines the number of lobes or loops in the figure. Example for Combined Phase and Frequency\r#\r# See code in notebook 5. Practical Steps for Visualization\r#\rGenerate Two Signals:\nUse two sinusoidal signals with adjustable frequencies and phase differences. Example: Signal 1: $ x(t) = \\sin(2\\pi f_x t) $ Signal 2: $ y(t) = \\sin(2\\pi f_y t + \\delta) $ Set Up an Oscilloscope:\nConnect Signal 1 to the X-axis and Signal 2 to the Y-axis. Enable X-Y mode on the oscilloscope. Adjust Parameters:\nVary $ f_x : f_y $ to explore different patterns. Adjust $ \\delta $ to observe how the figure changes. Interpret the Results:\nUse the figure’s shape to determine the phase difference and frequency ratio. Summary\r#\rLissajous figures are influenced by phase difference ($ \\delta $) and frequency ratio ($ f_x : f_y $):\nPhase controls the shape (line, circle, ellipse). Frequency ratio determines complexity (loops, lobes). "},{"id":2,"href":"/docs/ideas/am/","title":"Amplitude Modulation","section":"Ideas","content":"\rAmplitude Modulation Example\r#\r1. What is Amplitude Modulation?\r#\rAmplitude Modulation (AM) is a method of modulating a carrier wave by varying its amplitude in proportion to the amplitude of the input signal, typically a low-frequency audio signal. The carrier wave\u0026rsquo;s frequency remains constant, but its amplitude fluctuates according to the instantaneous amplitude of the modulating signal. Figure: Amplitude-modulated wave with a carrier frequency of 500 Hz and a modulation frequency of 100 Hz.\nKey Characteristics of AM:\nCarrier Wave: A high-frequency signal used to \u0026ldquo;carry\u0026rdquo; the information. Modulating Signal: The lower-frequency input signal containing the information to be transmitted. Resulting Wave: The modulated wave consists of the carrier frequency and two sidebands (upper and lower), which are mirror images of the modulating signal. Applications of AM:\nBroadcasting: AM has been widely used in radio broadcasting (e.g., AM radio). Communication: Used in aviation and maritime communication due to its simplicity and reliability. 1.1 Multiplicative Form\r#\rThe AM wave can be described mathematically using the multiplicative form. If:\nThe carrier wave is: $$\rc(t) = A_c \\sin(2\\pi f_c t)\r$$ The modulating signal is: $$\rm(t) = A_m \\sin(2\\pi f_m t)\r$$ Then the AM wave is: $$\rs(t) = \\left[A_c + m(t)\\right] \\sin(2\\pi f_c t)\r$$This equation represents how the amplitude of the carrier wave $ c(t) $ is varied (modulated) by the modulating signal $ m(t) $.\nVisualization\r#\rBelow is the visualization of:\n$ s(t) $: The resulting AM wave. $ c(t) $: The carrier wave. $ m(t) $: The modulating signal. # See code in notebook 1.2 Substitution form\r#\rThe AM wave is given by: $$\rs(t) = \\left[A_c + m(t)\\right] \\sin(2\\pi f_c t)\r$$ where $ m(t) = A_m \\sin(2\\pi f_m t) $. Substituting $ m(t) $ into the equation, we get: $$\rs(t) = \\left[A_c + A_m \\sin(2\\pi f_m t)\\right] \\sin(2\\pi f_c t)\r$$Distribute $ \\sin(2\\pi f_c t) $: $$\rs(t) = A_c \\sin(2\\pi f_c t) + A_m \\sin(2\\pi f_m t) \\sin(2\\pi f_c t)\r$$Using the trigonometric identity: $$\r\\sin(A) \\sin(B) = \\frac{1}{2} \\left[\\cos(A-B) - \\cos(A+B)\\right]\r$$ we expand $ \\sin(2\\pi f_m t) \\sin(2\\pi f_c t) $: $$\r\\sin(2\\pi f_m t) \\sin(2\\pi f_c t) = \\frac{1}{2} \\left[\\cos(2\\pi (f_c - f_m)t) - \\cos(2\\pi (f_c + f_m)t)\\right]\r$$Substitute this back into $ s(t) $: $$\rs(t) = A_c \\sin(2\\pi f_c t) + \\frac{A_m}{2} \\left[\\cos(2\\pi (f_c - f_m)t) - \\cos(2\\pi (f_c + f_m)t)\\right]\r$$Rearranging, we get the final expanded form: $$\rs(t) = A_c \\sin(2\\pi f_c t) + \\frac{A_m}{2} \\cos(2\\pi (f_c - f_m)t) - \\frac{A_m}{2} \\cos(2\\pi (f_c + f_m)t)\r$$\rVisualization\r#\rBelow are the plots of:\nThe resulting AM Signal: $ s(t) $, Carrier Wave: $ A_c \\sin(2\\pi f_c t) $, Lower Sideband: $ \\frac{A_m}{2} \\cos(2\\pi (f_c - f_m)t) $, Upper Sideband: $ -\\frac{A_m}{2} \\cos(2\\pi (f_c + f_m)t) $. # See code in notebook 2. Which Form to Use?\r#\rWhen generating AM waves, the substitution form is strongly recommended over the multiplicative form due to two key advantages:\n2.1 Error Reduction\r#\rThe multiplicative form: $$\rs(t) = [A_c + m(t)] \\sin(2\\pi f_c t)\r$$ requires runtime multiplication of LUT-derived values. This compounds errors from quantization and interpolation, leading to significant inaccuracies in the output.\nIn contrast, the substitution form: $$\rs(t) = A_c \\sin(2\\pi f_c t) + \\frac{A_m}{2} \\cos(2\\pi (f_c - f_m)t) - \\frac{A_m}{2} \\cos(2\\pi (f_c + f_m)t)\r$$ avoids runtime multiplication by precomputing the carrier and sideband components. Errors from individual LUTs combine linearly when added, resulting in a much more accurate signal.\n2.2 Computational Efficiency\r#\rAddition is inherently faster and less resource-intensive than multiplication, especially on microcontrollers. Using the substitution form:\nReduces runtime operations to simple additions and LUT lookups. Ensures high sampling rates can be achieved without overloading the processor. Conserves energy, making it suitable for resource-constrained, battery-powered systems. 2.3 Conclusion\r#\rThe substitution form minimizes errors and optimizes performance, making it ideal for real-time AM waveform generation. Its combination of accuracy and computational efficiency ensures reliable operation, even on low-cost microcontrollers.\n"},{"id":3,"href":"/docs/ideas/sweep/","title":"Sweep Wave","section":"Ideas","content":"\rSweep Wave\r#\rA sweep wave is a waveform where the frequency gradually changes over time instead of remaining constant. This gradual shift in frequency is useful for analyzing system responses, testing circuits, and generating special sound effects.\nFigure: (a)Frequency at midpoint of the sweep (starting from 100Hz, approaching 1000Hz)\nFigure: (b)End of the sweep at 1000Hz\nTypes of Sweep Waves\r#\rSweep waves are generally classified into Linear Sweep and Exponential Sweep, each following a distinct mathematical model.\n1. Linear Sweep\r#\rA linear sweep increases or decreases frequency at a constant rate over time. The instantaneous frequency $ f(t) $ at time $ t $ is given by:\n$$\rf(t) = f_{\\text{start}} + \\frac{(f_{\\text{end}} - f_{\\text{start}})}{T} \\cdot t\r$$where:\n$ f_{\\text{start}} $ is the initial frequency, $ f_{\\text{end}} $ is the final frequency, $ T $ is the total sweep duration, $ t $ is the current time. Below is the linear sweep waveform at midpoint of the sweep (starting from 100Hz, approaching 1000Hz):\nThe frequency increases linearly, meaning the rate of change remains constant over time. The phase is continuously integrated, ensuring smooth waveform transitions. # See code in notebook 2. Exponential Sweep\r#\rAn exponential sweep changes the frequency exponentially, meaning the rate of frequency change is proportional to the frequency itself. The instantaneous frequency is given by:\n$$\rf(t) = f_{\\text{start}} \\cdot \\left( \\frac{f_{\\text{end}}}{f_{\\text{start}}} \\right)^{\\frac{t}{T}}\r$$where:\n$ f_{\\text{start}} $ is the initial frequency, $ f_{\\text{end}} $ is the final frequency, $ T $ is the total sweep duration, $ t $ is the current time. Below is the exponential sweep waveform at midpoint of the sweep (starting from 100Hz, approaching 1000Hz):\nThe frequency increases exponentially, producing a smoothly accelerating waveform. The phase is continuously integrated, ensuring a completely smooth transition. # See code in notebook Choosing Between Linear and Exponential Sweep\r#\rLinear Sweep: Best for even frequency coverage, suitable for testing audio systems and electronic circuits. Exponential Sweep: More natural for hearing perception and used in acoustics and radar applications. "},{"id":4,"href":"/docs/licenses/","title":"Licenses","section":"Docs","content":"\rLicenses\r#\rTinyalg Systems projects are licensed under the following terms:\nDocumentation: CC BY-NC-ND 4.0\r#\rThe documentation on waveu.tinyalg.be is licensed under Creative Commons Attribution-NonCommercial-NoDerivatives 4.0.\nYou may share it non-commercially without modifications, with proper attribution:\nDocumentation by Tinyalg Systems, licensed under CC BY-NC-ND 4.0. Source: https://waveu.tinyalg.be. Learn more at the CC BY-NC-ND 4.0 License page.\nSoftware: BSD 3-Clause\r#\rAll software is licensed under the BSD 3-Clause License, allowing use, modification, and redistribution with attribution.\nCopyright (c) 2024-2025 Tinyalg Systems. Licensed under the BSD 3-Clause License. See LICENSE in the project repository. Explore software licenses:\nWaveu "},{"id":5,"href":"/docs/about-tinyalg/","title":"About Tinyalg","section":"Docs","content":"\rAbout Tinyalg Systems\r#\rTinyalg stands for \u0026ldquo;tiny algorithms.\u0026rdquo; Even smaller—tiny—programs that implement useful algorithms, which you can understand top to bottom, can create impactful solutions when equipped with practical approaches. Our philosophy is rooted in making complex concepts accessible and actionable, enabling developers to create meaningful innovations.\nThis philosophy drives everything we do at Tinyalg Systems, forming the foundation of our missions. These missions define our commitment to empowering developers and creating impactful solutions:\nOur Missions\r#\rAt the heart of Tinyalg Systems are three key missions that define who we are and what we strive to achieve:\n1. Explore\r#\rTo fill the gap between introductory materials and advanced resources in application development.\nWe believe that every developer deserves the tools and knowledge to confidently transition from beginner to advanced levels. Tinyalg Systems bridges this gap by creating resources that are both approachable and comprehensive.\n2. Experiment\r#\rTo foster experimentation and discovering through hands-on tools.\nCreativity thrives when developers have the freedom to experiment. Our solutions and examples are designed to inspire curiosity and encourage hands-on learning, allowing you to discover new possibilities in technology applications.\n3. Innovate\r#\rTo empower developers to design efficient systems that maximize potential and minimize environmental impact.\nInnovation is at the core of what we do. By enabling resource-efficient designs, Tinyalg Systems supports developers in creating impactful solutions that are not only high-performing but also mindful of sustainability.\nHow We Help Developers\r#\rWhether you’re exploring new technologies for the first time, experimenting with creative solutions, or innovating for real-world impact, Tinyalg Systems is here to support you:\nResources: Comprehensive guides, tutorials, and insights tailored to your development journey. Solutions: Developer-friendly libraries like WaveGen and Tyzr, designed for performance and ease of use. Community: A growing ecosystem of like-minded developers sharing knowledge and inspiration. A Vision for the Future\r#\rTinyalg Systems envisions a world where technology empowers developers to solve challenges, innovate responsibly, and inspire the next wave of breakthroughs. As we grow, we aim to sustain and expand Tinyalg Systems in a way that continues to prioritize innovation, accessibility, and value for developers.\n#\rJoin us on this journey to Explore, Experiment, and Innovate.\n"},{"id":6,"href":"/posts/launched-waveu-site/","title":"Launched Waveu Site","section":"Blog","content":"\rLaunched Waveu Site\r#\rWe’re thrilled to announce the launch of the Waveu Site! Over the past week, we’ve been busy building the site using a combination of GitHub Pages and AWS Lightsail, and we’re excited to share the details behind its construction.\nWhether you’re a seasoned developer or just starting to explore the world of microcontrollers, the Waveu site is here to support your journey. Our goal is to provide practical tools, insightful resources, and inspiration to help you create and innovate with confidence.\nMain Site: GitHub Pages\r#\rThe Waveu site is a central resource for Waveu, tailored for microcontroller enthusiasts and professionals.\nHosting: The site is hosted on GitHub Pages, ensuring a reliable and cost-effective solution for our primary content. Content Creation: We used Hugo to generate the static site and chose the versatile Book theme for a clean and developer-friendly layout. Backend: AWS Lightsail\r#\rThe backend infrastructure is powered by AWS Lightsail, offering flexibility and simplicity for managing additional services.\nWeb Server: We use Nginx as the web server to host. Nginx was selected over alternatives like Apache because of its event-driven architecture, making it highly efficient for serving static files and handling concurrent connections with minimal resource usage. This makes it an ideal choice for our lightweight static website setup.\nAnalytics with Matomo:\nWe use Matomo to track page access and gather insights while respecting user privacy. By avoiding cookies, we ensure a distraction-free experience without intrusive consent popups. Static Website:\ntinyalg.be: A straightforward HTML site for our organization’s main entry point. #\rWe’re excited to see how developers engage with the Waveu site. Whether you’re here to learn, experiment, or collaborate, we encourage you to explore the site and discover what it has to offer. Our GitHub repository is open for contributions and feedback! Join us to explore, experiment, and innovate with microcontrollers. Share your thoughts, bookmark our resources, and stay tuned for future updates—we’re just getting started!\n"}]